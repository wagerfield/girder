/** * Copyright (C) 2011 by Matthew Wagerfield *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package com.wagerfield.utils{	/**	 * @author Matthew Wagerfield	 */	public class Physics	{		private const MIN_LIMIT:Number = 0;		private const MAX_LIMIT:Number = 0.99;			private var _reference:Object;		private var _difference:Object;		private var _physics:Object;		private var _inertia:Object;		/**		 * Simple Physics class for iteratively chasing target properties with friction and inertia physics applied to them.		 * 		 * @param reference Reference Object that will chase the target properties specified from within the chase function.		 */		public function Physics(reference:Object):void		{			_reference = reference;			_difference = {};			_physics = {};			_inertia = {};		}		/**		 * Performs an equation; using the specified firction and inertia values, on the reference Object's properties that match those of the target Object's properties.		 * 		 * @param target Object containing target properties and values to which the reference Object attempts to reach.		 * @param friction Affects the friction and hence drag of the reference Object as it attempts to chase the target Object's properties. Default is 0.		 * @param inertia Affects the mass and hence built up inertia of the reference Object as it attempts to chase the target Object's properties. Default is 0.		 */		public function chase(target:Object, friction:Number = 0, inertia:Number = 0):void		{			friction = Math.max(friction, MIN_LIMIT);			friction = Math.min(friction, MAX_LIMIT);						inertia = Math.max(inertia, MIN_LIMIT);			inertia = Math.min(inertia, MAX_LIMIT);						for (var p:String in target)			{				_difference[p] = target[p] - _reference[p];				_physics[p] = (isNaN(Number(_physics[p])) ? 0 : Number(_physics[p])) * inertia + _difference[p] * (1 - friction);				_inertia[p] = _physics[p];				_reference[p] += _physics[p];			}		}		public function drift(target:Object, friction:Number = 0):void		{			friction = Math.max(friction, MIN_LIMIT);			friction = Math.min(friction, MAX_LIMIT);						for (var p:String in target)			{				_inertia[p] = isNaN(Number(_inertia[p])) ? 0 : Number(_inertia[p]) * (1 - friction);				_reference[p] += _inertia[p];			}		}	}}